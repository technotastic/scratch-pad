<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ephemeral Text</title>
    <style>
        /* Basic Reset & Body Styling */
        body {
            margin: 0;
            padding: 0;
            font-family: 'Garamond', 'Times New Roman', serif; /* Choose a slightly more classic/poetic font */
            background-color: #f4f4f0; /* Off-white, paper-like background */
            color: #333; /* Dark grey text */
            min-height: 100vh;
            overflow: hidden; /* Prevent scrollbars if text goes off-edge */
            cursor: pointer; /* Indicate the whole body is clickable */
        }

        /* Container for the ephemeral text */
        #textCanvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow: hidden; /* Keep text within bounds */
            pointer-events: none; /* Allow clicks to pass through to the body */
        }

        /* Styling for the dynamically created text elements */
        .ephemeral-text {
            position: absolute;
            white-space: nowrap; /* Prevent words from wrapping */
            user-select: none; /* Prevent text selection */
            pointer-events: none; /* Ensure they don't block clicks */
            opacity: 0; /* Start invisible */
            transition: opacity 2.5s ease-out, transform 2.5s ease-out; /* Fade out and potentially move/scale out */
            will-change: opacity, transform; /* Hint for browser optimization */
            font-weight: bold;
        }

        /* Header/Instructions Styling */
        .instructions {
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(255, 255, 255, 0.8); /* Semi-transparent white background */
            padding: 10px 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            text-align: center;
            z-index: 10; /* Ensure it's above the ephemeral text */
            pointer-events: all; /* Allow interaction if needed later, though none now */
        }

        h1 {
            margin: 0 0 5px 0;
            font-size: 1.5em;
            color: #5a4a3a; /* Earthy brown */
        }

        p {
            margin: 0;
            font-size: 0.9em;
            color: #666;
        }

    </style>
</head>
<body>

    <div class="instructions">
        <h1>Ephemeral Text</h1>
        <p>Click anywhere to leave a fleeting word.</p>
    </div>

    <div id="textCanvas">
        <!-- Ephemeral text will be added here by JavaScript -->
    </div>

    <script>
        const textCanvas = document.getElementById('textCanvas');
        const body = document.body;

        // A list of words to choose from
        const wordList = [
            "moment", "dream", "whisper", "shadow", "light", "echo", "fleeting",
            "memory", "spark", "ripple", "breath", "silence", "wander", "lost",
            "found", "glow", "fade", "transient", "ethereal", "imagine", "reflect",
            "drift", "shimmer", "trace", "glimpse", "wonder", "serene", "vivid"
        ];

        // Vibrant color palette (feel free to customize)
        const colorPalette = [
            "#e63946", "#f4a261", "#e76f51", "#2a9d8f", "#264653",
            "#8ecae6", "#219ebc", "#ffb703", "#fb8500", "#e07a5f",
            "#3d405b", "#81b29a", "#f2cc8f", "#c9184a", "#ff758f"
        ];

        // Helper function to get a random element from an array
        function getRandomElement(arr) {
            return arr[Math.floor(Math.random() * arr.length)];
        }

        // Helper function to get a random number in a range
        function getRandomInRange(min, max) {
            return Math.random() * (max - min) + min;
        }

        function createEphemeralText(x, y) {
            const word = getRandomElement(wordList);
            const color = getRandomElement(colorPalette);
            const fontSize = getRandomInRange(16, 48); // Font size in pixels
            const rotation = getRandomInRange(-25, 25); // Rotation in degrees
            const fadeoutDelay = 2500; // Time in ms before fade-out completes (matches CSS transition)
            const removalDelay = fadeoutDelay + 100; // Time before removing element from DOM

            // Create the text element
            const textElement = document.createElement('span');
            textElement.classList.add('ephemeral-text');
            textElement.textContent = word;

            // Apply styles
            textElement.style.left = `${x}px`;
            textElement.style.top = `${y}px`;
            textElement.style.fontSize = `${fontSize}px`;
            textElement.style.color = color;
            // Center the text element roughly on the click point using transform
            textElement.style.transform = `translate(-50%, -50%) rotate(${rotation}deg) scale(0.8)`; // Start slightly smaller
            textElement.style.transformOrigin = 'center center';

            // Append to the canvas
            textCanvas.appendChild(textElement);

            // --- Trigger Fade In and Out ---

            // 1. Force reflow/repaint to ensure initial state (opacity 0, small scale) is registered
            void textElement.offsetWidth;

            // 2. Apply final state for transition (fade in, scale up slightly)
            requestAnimationFrame(() => {
                 textElement.style.opacity = '0.85'; // Fade in to slightly less than full opacity
                 textElement.style.transform = `translate(-50%, -50%) rotate(${rotation * 0.8}deg) scale(1)`; // Scale to normal size, slightly less rotation
            });


            // 3. Set timeout to trigger fade out
            setTimeout(() => {
                textElement.style.opacity = '0';
                // Optional: Add a slight upward drift or scale down on fade out
                textElement.style.transform = `translate(-50%, -70%) rotate(${rotation * 0.5}deg) scale(0.9)`;
            }, fadeoutDelay - 1500); // Start fading out a bit before the end of the transition duration


            // 4. Set timeout to remove the element from the DOM after the fade-out transition completes
            setTimeout(() => {
                if (textElement.parentNode === textCanvas) {
                    textCanvas.removeChild(textElement);
                }
            }, removalDelay);
        }

        // --- Event Listener ---

        body.addEventListener('click', (event) => {
            // Get click coordinates relative to the viewport
            const x = event.clientX;
            const y = event.clientY;

            createEphemeralText(x, y);
        });

    </script>

</body>
</html>
